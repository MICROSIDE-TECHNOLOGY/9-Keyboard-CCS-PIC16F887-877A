CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 17:12
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\9-Keyboard-CCS-PIC16F887-877A\Proyecto\PIC16F877A\Teclado matricial.lst

               ROM used:   262 words (3%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           13 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E0
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Teclado matricial.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... En esta práctica se realiza el control de encendido o apagado de un LED 
.................... mediante un teclado matricial,  que al presionar la tecla 1 se enciende 
.................... el LED y al presionar la tecla 0 se apagará el LED.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h>                 //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  41
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  42
0010:  RETLW  37
0011:  RETLW  38
0012:  RETLW  39
0013:  RETLW  43
0014:  RETLW  2A
0015:  RETLW  30
0016:  RETLW  23
0017:  RETLW  44
*
00D8:  BCF    0A.0
00D9:  BCF    0A.1
00DA:  BCF    0A.2
00DB:  ADDWF  02,F
00DC:  GOTO   051
00DD:  GOTO   062
00DE:  GOTO   073
00DF:  GOTO   084
.................... 
.................... #list
.................... 
.................... #use delay ( clock=20Mhz, crystal )  //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... 
.................... #define LED PIN_A1                   //Pin donde está conectado el LED de X-TRAINER
.................... char TECLA_PRESS;
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... CONFIGURACIÓN DE PINES TECLADO
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #define row0 PIN_B0                  //Filas del teclado colocar resistencia pullup
.................... #define row1 PIN_B1                  //Filas del teclado colocar resistencia pullup
.................... #define row2 PIN_B2                  //Filas del teclado colocar resistencia pullup
.................... #define row3 PIN_B3                  //Filas del teclado colocar resistencia pullup
.................... #define col0 PIN_B4                  //Columnas del teclado
.................... #define col1 PIN_B5                  //Columnas del teclado
.................... #define col2 PIN_B6                  //Columnas del teclado
.................... #define col3 PIN_B7                  //Columnas del teclado
.................... 
.................... #include "Teclado4x4.h"              //Librería de teclado
.................... 
.................... // Asignacion de los caracteres a las teclas 
.................... char const KEYS[4][4] =
.................... {{'1','2','3','A'},
....................  {'4','5','6','B'},
....................  {'7','8','9','C'},
....................  {'*','0','#','D'}};
.................... 
.................... 
.................... #define KBD_DEBOUNCE_FACTOR 3 // Set this number to apx n/333 where
.................... // n is the number of times you expect
.................... // to call kbd_getc each second
.................... 
.................... void kbd_init()
.................... {
....................  set_tris_b(0x0F);   // B7-B4 columnas, B3-B0 filas
*
0018:  MOVLW  0F
0019:  BSF    03.5
001A:  MOVWF  06
....................  port_b_pullups(true); 
001B:  BCF    01.7
001C:  BCF    03.5
001D:  BCF    0A.3
001E:  BCF    0A.4
001F:  GOTO   0F1 (RETURN)
.................... }
.................... 
.................... short int ALL_ROWS (void)
.................... {
.................... if(input (row0) & input (row1) & input (row2) & input (row3))
0020:  BSF    03.5
0021:  BSF    06.0
0022:  MOVLW  00
0023:  BCF    03.5
0024:  BTFSC  06.0
0025:  MOVLW  01
0026:  MOVWF  27
0027:  BSF    03.5
0028:  BSF    06.1
0029:  MOVLW  00
002A:  BCF    03.5
002B:  BTFSC  06.1
002C:  MOVLW  01
002D:  ANDWF  27,F
002E:  BSF    03.5
002F:  BSF    06.2
0030:  MOVLW  00
0031:  BCF    03.5
0032:  BTFSC  06.2
0033:  MOVLW  01
0034:  ANDWF  27,F
0035:  BSF    03.5
0036:  BSF    06.3
0037:  MOVLW  00
0038:  BCF    03.5
0039:  BTFSC  06.3
003A:  MOVLW  01
003B:  ANDWF  27,W
003C:  BTFSC  03.2
003D:  GOTO   042
....................    return (0);
003E:  MOVLW  00
003F:  MOVWF  78
0040:  GOTO   044
0041:  GOTO   044
.................... else
....................    return (1);
0042:  MOVLW  01
0043:  MOVWF  78
0044:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... char kbd_getc()
.................... {
.................... static byte kbd_call_count;
*
00EB:  BCF    03.5
00EC:  CLRF   21
.................... static short int kbd_down;
00ED:  BCF    22.0
.................... static char last_key;
00EE:  CLRF   23
.................... static byte col;
00EF:  CLRF   24
.................... 
.................... byte kchar;
.................... byte row;
.................... 
.................... kchar='\0';
*
0045:  CLRF   25
.................... 
.................... if(++kbd_call_count>KBD_DEBOUNCE_FACTOR)
0046:  INCF   21,F
0047:  MOVF   21,W
0048:  SUBLW  03
0049:  BTFSC  03.0
004A:  GOTO   0D3
....................   {
....................    switch (col)
004B:  MOVF   24,W
004C:  ADDLW  FC
004D:  BTFSC  03.0
004E:  GOTO   094
004F:  ADDLW  04
0050:  GOTO   0D8
....................      {
....................       case 0:
....................         output_low(col0);
0051:  BSF    03.5
0052:  BCF    06.4
0053:  BCF    03.5
0054:  BCF    06.4
....................         output_high(col1);
0055:  BSF    03.5
0056:  BCF    06.5
0057:  BCF    03.5
0058:  BSF    06.5
....................         output_high(col2);
0059:  BSF    03.5
005A:  BCF    06.6
005B:  BCF    03.5
005C:  BSF    06.6
....................         output_high(col3);
005D:  BSF    03.5
005E:  BCF    06.7
005F:  BCF    03.5
0060:  BSF    06.7
....................         break;
0061:  GOTO   094
....................    
....................       case 1:
....................         output_high(col0);
0062:  BSF    03.5
0063:  BCF    06.4
0064:  BCF    03.5
0065:  BSF    06.4
....................         output_low(col1);
0066:  BSF    03.5
0067:  BCF    06.5
0068:  BCF    03.5
0069:  BCF    06.5
....................         output_high(col2);
006A:  BSF    03.5
006B:  BCF    06.6
006C:  BCF    03.5
006D:  BSF    06.6
....................         output_high(col3);
006E:  BSF    03.5
006F:  BCF    06.7
0070:  BCF    03.5
0071:  BSF    06.7
....................         break;
0072:  GOTO   094
.................... 
....................       case 2:
....................         output_high(col0);
0073:  BSF    03.5
0074:  BCF    06.4
0075:  BCF    03.5
0076:  BSF    06.4
....................         output_high(col1);
0077:  BSF    03.5
0078:  BCF    06.5
0079:  BCF    03.5
007A:  BSF    06.5
....................         output_low(col2);
007B:  BSF    03.5
007C:  BCF    06.6
007D:  BCF    03.5
007E:  BCF    06.6
....................         output_high(col3);
007F:  BSF    03.5
0080:  BCF    06.7
0081:  BCF    03.5
0082:  BSF    06.7
....................         break;
0083:  GOTO   094
.................... 
....................       case 3:
....................         output_high(col0);
0084:  BSF    03.5
0085:  BCF    06.4
0086:  BCF    03.5
0087:  BSF    06.4
....................         output_high(col1);
0088:  BSF    03.5
0089:  BCF    06.5
008A:  BCF    03.5
008B:  BSF    06.5
....................         output_high(col2);
008C:  BSF    03.5
008D:  BCF    06.6
008E:  BCF    03.5
008F:  BSF    06.6
....................         output_low(col3);
0090:  BSF    03.5
0091:  BCF    06.7
0092:  BCF    03.5
0093:  BCF    06.7
....................         break;
....................       }
.................... 
....................    if(kbd_down)
0094:  BTFSS  22.0
0095:  GOTO   09F
....................      {
....................       if(!ALL_ROWS())
0096:  CALL   020
0097:  MOVF   78,F
0098:  BTFSS  03.2
0099:  GOTO   09E
....................         {
....................          kbd_down=false;
009A:  BCF    22.0
....................          kchar=last_key;
009B:  MOVF   23,W
009C:  MOVWF  25
....................          last_key='\0';
009D:  CLRF   23
....................         }
....................      }
009E:  GOTO   0D2
....................    else
....................      {
....................       if(ALL_ROWS())
009F:  CALL   020
00A0:  MOVF   78,F
00A1:  BTFSC  03.2
00A2:  GOTO   0CD
....................         {
....................          if(!input (row0))
00A3:  BSF    03.5
00A4:  BSF    06.0
00A5:  BCF    03.5
00A6:  BTFSC  06.0
00A7:  GOTO   0AA
....................             row=0;
00A8:  CLRF   26
00A9:  GOTO   0C1
....................          else if(!input (row1))
00AA:  BSF    03.5
00AB:  BSF    06.1
00AC:  BCF    03.5
00AD:  BTFSC  06.1
00AE:  GOTO   0B2
....................             row=1;
00AF:  MOVLW  01
00B0:  MOVWF  26
00B1:  GOTO   0C1
....................          else if(!input (row2))
00B2:  BSF    03.5
00B3:  BSF    06.2
00B4:  BCF    03.5
00B5:  BTFSC  06.2
00B6:  GOTO   0BA
....................             row=2;
00B7:  MOVLW  02
00B8:  MOVWF  26
00B9:  GOTO   0C1
....................          else if(!input (row3))
00BA:  BSF    03.5
00BB:  BSF    06.3
00BC:  BCF    03.5
00BD:  BTFSC  06.3
00BE:  GOTO   0C1
....................             row=3;
00BF:  MOVLW  03
00C0:  MOVWF  26
.................... 
....................          last_key =KEYS[row][col];
00C1:  RLF    26,W
00C2:  MOVWF  77
00C3:  RLF    77,F
00C4:  MOVLW  FC
00C5:  ANDWF  77,F
00C6:  MOVF   77,W
00C7:  ADDWF  24,W
00C8:  CALL   004
00C9:  MOVWF  78
00CA:  MOVWF  23
....................          kbd_down = true;
00CB:  BSF    22.0
....................         }
00CC:  GOTO   0D2
....................       else
....................         {
....................          ++col;
00CD:  INCF   24,F
....................          if(col==4)
00CE:  MOVF   24,W
00CF:  SUBLW  04
00D0:  BTFSC  03.2
....................             col=0;
00D1:  CLRF   24
....................         }
....................      }
....................    kbd_call_count=0;
00D2:  CLRF   21
....................   }
.................... return(kchar);
00D3:  MOVF   25,W
00D4:  MOVWF  78
00D5:  BCF    0A.3
00D6:  BCF    0A.4
00D7:  GOTO   0F2 (RETURN)
.................... }
.................... 
.................... //=========================== 
.................... 
.................... 
.................... void main ( void ) {
*
00E0:  MOVF   03,W
00E1:  ANDLW  1F
00E2:  MOVWF  03
00E3:  BSF    03.5
00E4:  BSF    1F.0
00E5:  BSF    1F.1
00E6:  BSF    1F.2
00E7:  BCF    1F.3
00E8:  MOVLW  07
00E9:  MOVWF  1C
00EA:  BCF    03.7
....................    kbd_init ( );                     //inicialización del teclado.
*
00F0:  GOTO   018
.................... 
....................    while ( 1 ) {
....................       TECLA_PRESS = kbd_getc ( );
00F1:  GOTO   045
00F2:  MOVF   78,W
00F3:  MOVWF  20
.................... 
....................       if ( TECLA_PRESS == '1' ) {
00F4:  MOVF   20,W
00F5:  SUBLW  31
00F6:  BTFSS  03.2
00F7:  GOTO   0FC
....................          output_HIGH ( LED );        //Cambio de estado en el pin RA1
00F8:  BSF    03.5
00F9:  BCF    05.1
00FA:  BCF    03.5
00FB:  BSF    05.1
....................       }
.................... 
....................       if ( TECLA_PRESS == '0' ) {
00FC:  MOVF   20,W
00FD:  SUBLW  30
00FE:  BTFSS  03.2
00FF:  GOTO   104
....................          output_LOW ( LED );         //Cambio de estado en el pin RA1
0100:  BSF    03.5
0101:  BCF    05.1
0102:  BCF    03.5
0103:  BCF    05.1
....................       }
0104:  GOTO   0F1
....................    }
.................... }
0105:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
