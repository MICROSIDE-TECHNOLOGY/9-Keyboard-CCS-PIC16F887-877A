CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 14:41

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\877A\Práctica 9\Teclado matricial.lst

               ROM used:   261 words (3%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           13 (4%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DF
0003:  NOP
....................  /* 
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
.................... FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... --------------------------------------------------------------------------- 
.................... En esta práctica se realiza el control de encendido o apagado de un LED  
.................... mediante un teclado matricial,  que al presionar la tecla 1 se enciende  
.................... el LED y al presionar la tecla 0 se apagará el LED. 
.................... --------------------------------------------------------------------------- 
.................... */ 
....................  
.................... #include <16F877A.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  41
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  42
0010:  RETLW  37
0011:  RETLW  38
0012:  RETLW  39
0013:  RETLW  43
0014:  RETLW  2A
0015:  RETLW  30
0016:  RETLW  23
0017:  RETLW  44
*
00D7:  BCF    0A.0
00D8:  BCF    0A.1
00D9:  BCF    0A.2
00DA:  ADDWF  02,F
00DB:  GOTO   050
00DC:  GOTO   061
00DD:  GOTO   072
00DE:  GOTO   083
....................  
.................... #list 
....................  
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
....................  
....................  
.................... #define LED PIN_A1                              //Pin donde está conectado el LED de X-TRAINER 
.................... char TECLA_PRESS; 
....................  
.................... /* 
.................... --------------------------------------------------------------------------- 
.................... CONFIGURACIÓN DE PINES TECLADO 
.................... --------------------------------------------------------------------------- 
.................... */ 
....................  
.................... #define row0 PIN_B0                             //Filas del teclado colocar resistencia pullup 
.................... #define row1 PIN_B1                             //Filas del teclado colocar resistencia pullup 
.................... #define row2 PIN_B2                             //Filas del teclado colocar resistencia pullup 
.................... #define row3 PIN_B3                             //Filas del teclado colocar resistencia pullup 
.................... #define col0 PIN_B4                             //Columnas del teclado 
.................... #define col1 PIN_B5                             //Columnas del teclado 
.................... #define col2 PIN_B6                             //Columnas del teclado 
.................... #define col3 PIN_B7                             //Columnas del teclado 
....................  
.................... #include "Teclado4x4.h"                         //Librería de teclado 
....................  
.................... // Asignacion de los caracteres a las teclas  
.................... char const KEYS[4][4] = 
.................... {{'1','2','3','A'}, 
....................  {'4','5','6','B'}, 
....................  {'7','8','9','C'}, 
....................  {'*','0','#','D'}}; 
....................  
....................  
.................... #define KBD_DEBOUNCE_FACTOR 3 // Set this number to apx n/333 where 
.................... // n is the number of times you expect 
.................... // to call kbd_getc each second 
....................  
.................... void kbd_init() 
.................... { 
....................  set_tris_b(0x0F);   // B7-B4 columnas, B3-B0 filas 
*
0018:  MOVLW  0F
0019:  BSF    03.5
001A:  MOVWF  06
001B:  BCF    03.5
001C:  BCF    0A.3
001D:  BCF    0A.4
001E:  GOTO   0F0 (RETURN)
....................  // port_b_pullups(true);  
.................... } 
....................  
.................... short int ALL_ROWS (void) 
.................... { 
.................... if(input (row0) & input (row1) & input (row2) & input (row3)) 
001F:  BSF    03.5
0020:  BSF    06.0
0021:  MOVLW  00
0022:  BCF    03.5
0023:  BTFSC  06.0
0024:  MOVLW  01
0025:  MOVWF  27
0026:  BSF    03.5
0027:  BSF    06.1
0028:  MOVLW  00
0029:  BCF    03.5
002A:  BTFSC  06.1
002B:  MOVLW  01
002C:  ANDWF  27,F
002D:  BSF    03.5
002E:  BSF    06.2
002F:  MOVLW  00
0030:  BCF    03.5
0031:  BTFSC  06.2
0032:  MOVLW  01
0033:  ANDWF  27,F
0034:  BSF    03.5
0035:  BSF    06.3
0036:  MOVLW  00
0037:  BCF    03.5
0038:  BTFSC  06.3
0039:  MOVLW  01
003A:  ANDWF  27,W
003B:  BTFSC  03.2
003C:  GOTO   041
....................    return (0); 
003D:  MOVLW  00
003E:  MOVWF  78
003F:  GOTO   043
0040:  GOTO   043
.................... else 
....................    return (1); 
0041:  MOVLW  01
0042:  MOVWF  78
0043:  RETURN
.................... } 
....................  
....................  
....................  
.................... char kbd_getc() 
.................... { 
.................... static byte kbd_call_count; 
*
00EA:  BCF    03.5
00EB:  CLRF   21
.................... static short int kbd_down; 
00EC:  BCF    22.0
.................... static char last_key; 
00ED:  CLRF   23
.................... static byte col; 
00EE:  CLRF   24
....................  
.................... byte kchar; 
.................... byte row; 
....................  
.................... kchar='\0'; 
*
0044:  CLRF   25
....................  
.................... if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) 
0045:  INCF   21,F
0046:  MOVF   21,W
0047:  SUBLW  03
0048:  BTFSC  03.0
0049:  GOTO   0D2
....................   { 
....................    switch (col) 
004A:  MOVF   24,W
004B:  ADDLW  FC
004C:  BTFSC  03.0
004D:  GOTO   093
004E:  ADDLW  04
004F:  GOTO   0D7
....................      { 
....................       case 0: 
....................         output_low(col0); 
0050:  BSF    03.5
0051:  BCF    06.4
0052:  BCF    03.5
0053:  BCF    06.4
....................         output_high(col1); 
0054:  BSF    03.5
0055:  BCF    06.5
0056:  BCF    03.5
0057:  BSF    06.5
....................         output_high(col2); 
0058:  BSF    03.5
0059:  BCF    06.6
005A:  BCF    03.5
005B:  BSF    06.6
....................         output_high(col3); 
005C:  BSF    03.5
005D:  BCF    06.7
005E:  BCF    03.5
005F:  BSF    06.7
....................         break; 
0060:  GOTO   093
....................     
....................       case 1: 
....................         output_high(col0); 
0061:  BSF    03.5
0062:  BCF    06.4
0063:  BCF    03.5
0064:  BSF    06.4
....................         output_low(col1); 
0065:  BSF    03.5
0066:  BCF    06.5
0067:  BCF    03.5
0068:  BCF    06.5
....................         output_high(col2); 
0069:  BSF    03.5
006A:  BCF    06.6
006B:  BCF    03.5
006C:  BSF    06.6
....................         output_high(col3); 
006D:  BSF    03.5
006E:  BCF    06.7
006F:  BCF    03.5
0070:  BSF    06.7
....................         break; 
0071:  GOTO   093
....................  
....................       case 2: 
....................         output_high(col0); 
0072:  BSF    03.5
0073:  BCF    06.4
0074:  BCF    03.5
0075:  BSF    06.4
....................         output_high(col1); 
0076:  BSF    03.5
0077:  BCF    06.5
0078:  BCF    03.5
0079:  BSF    06.5
....................         output_low(col2); 
007A:  BSF    03.5
007B:  BCF    06.6
007C:  BCF    03.5
007D:  BCF    06.6
....................         output_high(col3); 
007E:  BSF    03.5
007F:  BCF    06.7
0080:  BCF    03.5
0081:  BSF    06.7
....................         break; 
0082:  GOTO   093
....................  
....................       case 3: 
....................         output_high(col0); 
0083:  BSF    03.5
0084:  BCF    06.4
0085:  BCF    03.5
0086:  BSF    06.4
....................         output_high(col1); 
0087:  BSF    03.5
0088:  BCF    06.5
0089:  BCF    03.5
008A:  BSF    06.5
....................         output_high(col2); 
008B:  BSF    03.5
008C:  BCF    06.6
008D:  BCF    03.5
008E:  BSF    06.6
....................         output_low(col3); 
008F:  BSF    03.5
0090:  BCF    06.7
0091:  BCF    03.5
0092:  BCF    06.7
....................         break; 
....................       } 
....................  
....................    if(kbd_down) 
0093:  BTFSS  22.0
0094:  GOTO   09E
....................      { 
....................       if(!ALL_ROWS()) 
0095:  CALL   01F
0096:  MOVF   78,F
0097:  BTFSS  03.2
0098:  GOTO   09D
....................         { 
....................          kbd_down=false; 
0099:  BCF    22.0
....................          kchar=last_key; 
009A:  MOVF   23,W
009B:  MOVWF  25
....................          last_key='\0'; 
009C:  CLRF   23
....................         } 
....................      } 
009D:  GOTO   0D1
....................    else 
....................      { 
....................       if(ALL_ROWS()) 
009E:  CALL   01F
009F:  MOVF   78,F
00A0:  BTFSC  03.2
00A1:  GOTO   0CC
....................         { 
....................          if(!input (row0)) 
00A2:  BSF    03.5
00A3:  BSF    06.0
00A4:  BCF    03.5
00A5:  BTFSC  06.0
00A6:  GOTO   0A9
....................             row=0; 
00A7:  CLRF   26
00A8:  GOTO   0C0
....................          else if(!input (row1)) 
00A9:  BSF    03.5
00AA:  BSF    06.1
00AB:  BCF    03.5
00AC:  BTFSC  06.1
00AD:  GOTO   0B1
....................             row=1; 
00AE:  MOVLW  01
00AF:  MOVWF  26
00B0:  GOTO   0C0
....................          else if(!input (row2)) 
00B1:  BSF    03.5
00B2:  BSF    06.2
00B3:  BCF    03.5
00B4:  BTFSC  06.2
00B5:  GOTO   0B9
....................             row=2; 
00B6:  MOVLW  02
00B7:  MOVWF  26
00B8:  GOTO   0C0
....................          else if(!input (row3)) 
00B9:  BSF    03.5
00BA:  BSF    06.3
00BB:  BCF    03.5
00BC:  BTFSC  06.3
00BD:  GOTO   0C0
....................             row=3; 
00BE:  MOVLW  03
00BF:  MOVWF  26
....................  
....................          last_key =KEYS[row][col]; 
00C0:  RLF    26,W
00C1:  MOVWF  77
00C2:  RLF    77,F
00C3:  MOVLW  FC
00C4:  ANDWF  77,F
00C5:  MOVF   77,W
00C6:  ADDWF  24,W
00C7:  CALL   004
00C8:  MOVWF  78
00C9:  MOVWF  23
....................          kbd_down = true; 
00CA:  BSF    22.0
....................         } 
00CB:  GOTO   0D1
....................       else 
....................         { 
....................          ++col; 
00CC:  INCF   24,F
....................          if(col==4) 
00CD:  MOVF   24,W
00CE:  SUBLW  04
00CF:  BTFSC  03.2
....................             col=0; 
00D0:  CLRF   24
....................         } 
....................      } 
....................    kbd_call_count=0; 
00D1:  CLRF   21
....................   } 
.................... return(kchar); 
00D2:  MOVF   25,W
00D3:  MOVWF  78
00D4:  BCF    0A.3
00D5:  BCF    0A.4
00D6:  GOTO   0F1 (RETURN)
.................... } 
....................  
.................... //===========================  
....................  
....................  
.................... void main() 
*
00DF:  MOVF   03,W
00E0:  ANDLW  1F
00E1:  MOVWF  03
00E2:  BSF    03.5
00E3:  BSF    1F.0
00E4:  BSF    1F.1
00E5:  BSF    1F.2
00E6:  BCF    1F.3
00E7:  MOVLW  07
00E8:  MOVWF  1C
00E9:  BCF    03.7
....................  
.................... { 
....................  
....................     kbd_init ();                                //inicialización del teclado. 
*
00EF:  GOTO   018
....................  
....................     while(TRUE) 
....................       { 
....................         TECLA_PRESS = kbd_getc () ; 
00F0:  GOTO   044
00F1:  MOVF   78,W
00F2:  MOVWF  20
....................  
....................          if (TECLA_PRESS == '1') 
00F3:  MOVF   20,W
00F4:  SUBLW  31
00F5:  BTFSS  03.2
00F6:  GOTO   0FB
....................           { 
....................             output_HIGH (LED);                  //Cambio de estado en el pin RA1 
00F7:  BSF    03.5
00F8:  BCF    05.1
00F9:  BCF    03.5
00FA:  BSF    05.1
....................           } 
....................  
....................           if (TECLA_PRESS == '0') 
00FB:  MOVF   20,W
00FC:  SUBLW  30
00FD:  BTFSS  03.2
00FE:  GOTO   103
....................          { 
....................              output_LOW (LED);                  //Cambio de estado en el pin RA1 
00FF:  BSF    03.5
0100:  BCF    05.1
0101:  BCF    03.5
0102:  BCF    05.1
....................           } 
0103:  GOTO   0F0
....................     } 
.................... } 
0104:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
