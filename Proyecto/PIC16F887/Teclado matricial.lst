CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 17:11
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\9-Keyboard-CCS-PIC16F887-877A\Proyecto\PIC16F887\Teclado matricial.lst

               ROM used:   272 words (3%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           13 (4%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E2
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... Teclado matricial.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... En esta práctica se realiza el control de encendido o apagado de un LED 
.................... mediante un teclado matricial,  que al presionar la tecla 1 se enciende 
.................... el LED y al presionar la tecla 0 se apagará el LED.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F887.h>                  //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  41
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  42
0010:  RETLW  37
0011:  RETLW  38
0012:  RETLW  39
0013:  RETLW  43
0014:  RETLW  2A
0015:  RETLW  30
0016:  RETLW  23
0017:  RETLW  44
*
00DA:  BCF    0A.0
00DB:  BCF    0A.1
00DC:  BCF    0A.2
00DD:  ADDWF  02,F
00DE:  GOTO   053
00DF:  GOTO   064
00E0:  GOTO   075
00E1:  GOTO   086
.................... 
.................... #list
.................... 
.................... #use delay ( clock=20Mhz, crystal )  //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... 
.................... #define LED PIN_A1                   //Pin donde está conectado el LED de X-TRAINER
.................... char TECLA_PRESS;
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... CONFIGURACIÓN DE PINES TECLADO
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #define row0 PIN_B0                  //Filas del teclado colocar resistencia pullup
.................... #define row1 PIN_B1                  //Filas del teclado colocar resistencia pullup
.................... #define row2 PIN_B2                  //Filas del teclado colocar resistencia pullup
.................... #define row3 PIN_B3                  //Filas del teclado colocar resistencia pullup
.................... #define col0 PIN_B4                  //Columnas del teclado
.................... #define col1 PIN_B5                  //Columnas del teclado
.................... #define col2 PIN_B6                  //Columnas del teclado
.................... #define col3 PIN_B7                  //Columnas del teclado
.................... 
.................... #include "Teclado4x4.h"              //Librería de teclado
.................... 
.................... // Asignacion de los caracteres a las teclas 
.................... char const KEYS[4][4] =
.................... {{'1','2','3','A'},
....................  {'4','5','6','B'},
....................  {'7','8','9','C'},
....................  {'*','0','#','D'}};
.................... 
.................... 
.................... #define KBD_DEBOUNCE_FACTOR 3 // Set this number to apx n/333 where
.................... // n is the number of times you expect
.................... // to call kbd_getc each second
.................... 
.................... void kbd_init()
.................... {
....................  set_tris_b(0x0F);   // B7-B4 columnas, B3-B0 filas
*
0018:  MOVLW  0F
0019:  BSF    03.5
001A:  MOVWF  06
....................  port_b_pullups(true); 
001B:  MOVLW  01
001C:  MOVWF  15
001D:  BCF    01.7
001E:  BCF    03.5
001F:  BCF    0A.3
0020:  BCF    0A.4
0021:  GOTO   0FB (RETURN)
.................... }
.................... 
.................... short int ALL_ROWS (void)
.................... {
.................... if(input (row0) & input (row1) & input (row2) & input (row3))
0022:  BSF    03.5
0023:  BSF    06.0
0024:  MOVLW  00
0025:  BCF    03.5
0026:  BTFSC  06.0
0027:  MOVLW  01
0028:  MOVWF  27
0029:  BSF    03.5
002A:  BSF    06.1
002B:  MOVLW  00
002C:  BCF    03.5
002D:  BTFSC  06.1
002E:  MOVLW  01
002F:  ANDWF  27,F
0030:  BSF    03.5
0031:  BSF    06.2
0032:  MOVLW  00
0033:  BCF    03.5
0034:  BTFSC  06.2
0035:  MOVLW  01
0036:  ANDWF  27,F
0037:  BSF    03.5
0038:  BSF    06.3
0039:  MOVLW  00
003A:  BCF    03.5
003B:  BTFSC  06.3
003C:  MOVLW  01
003D:  ANDWF  27,W
003E:  BTFSC  03.2
003F:  GOTO   044
....................    return (0);
0040:  MOVLW  00
0041:  MOVWF  78
0042:  GOTO   046
0043:  GOTO   046
.................... else
....................    return (1);
0044:  MOVLW  01
0045:  MOVWF  78
0046:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... char kbd_getc()
.................... {
.................... static byte kbd_call_count;
*
00F5:  BCF    03.6
00F6:  CLRF   21
.................... static short int kbd_down;
00F7:  BCF    22.0
.................... static char last_key;
00F8:  CLRF   23
.................... static byte col;
00F9:  CLRF   24
.................... 
.................... byte kchar;
.................... byte row;
.................... 
.................... kchar='\0';
*
0047:  CLRF   25
.................... 
.................... if(++kbd_call_count>KBD_DEBOUNCE_FACTOR)
0048:  INCF   21,F
0049:  MOVF   21,W
004A:  SUBLW  03
004B:  BTFSC  03.0
004C:  GOTO   0D5
....................   {
....................    switch (col)
004D:  MOVF   24,W
004E:  ADDLW  FC
004F:  BTFSC  03.0
0050:  GOTO   096
0051:  ADDLW  04
0052:  GOTO   0DA
....................      {
....................       case 0:
....................         output_low(col0);
0053:  BSF    03.5
0054:  BCF    06.4
0055:  BCF    03.5
0056:  BCF    06.4
....................         output_high(col1);
0057:  BSF    03.5
0058:  BCF    06.5
0059:  BCF    03.5
005A:  BSF    06.5
....................         output_high(col2);
005B:  BSF    03.5
005C:  BCF    06.6
005D:  BCF    03.5
005E:  BSF    06.6
....................         output_high(col3);
005F:  BSF    03.5
0060:  BCF    06.7
0061:  BCF    03.5
0062:  BSF    06.7
....................         break;
0063:  GOTO   096
....................    
....................       case 1:
....................         output_high(col0);
0064:  BSF    03.5
0065:  BCF    06.4
0066:  BCF    03.5
0067:  BSF    06.4
....................         output_low(col1);
0068:  BSF    03.5
0069:  BCF    06.5
006A:  BCF    03.5
006B:  BCF    06.5
....................         output_high(col2);
006C:  BSF    03.5
006D:  BCF    06.6
006E:  BCF    03.5
006F:  BSF    06.6
....................         output_high(col3);
0070:  BSF    03.5
0071:  BCF    06.7
0072:  BCF    03.5
0073:  BSF    06.7
....................         break;
0074:  GOTO   096
.................... 
....................       case 2:
....................         output_high(col0);
0075:  BSF    03.5
0076:  BCF    06.4
0077:  BCF    03.5
0078:  BSF    06.4
....................         output_high(col1);
0079:  BSF    03.5
007A:  BCF    06.5
007B:  BCF    03.5
007C:  BSF    06.5
....................         output_low(col2);
007D:  BSF    03.5
007E:  BCF    06.6
007F:  BCF    03.5
0080:  BCF    06.6
....................         output_high(col3);
0081:  BSF    03.5
0082:  BCF    06.7
0083:  BCF    03.5
0084:  BSF    06.7
....................         break;
0085:  GOTO   096
.................... 
....................       case 3:
....................         output_high(col0);
0086:  BSF    03.5
0087:  BCF    06.4
0088:  BCF    03.5
0089:  BSF    06.4
....................         output_high(col1);
008A:  BSF    03.5
008B:  BCF    06.5
008C:  BCF    03.5
008D:  BSF    06.5
....................         output_high(col2);
008E:  BSF    03.5
008F:  BCF    06.6
0090:  BCF    03.5
0091:  BSF    06.6
....................         output_low(col3);
0092:  BSF    03.5
0093:  BCF    06.7
0094:  BCF    03.5
0095:  BCF    06.7
....................         break;
....................       }
.................... 
....................    if(kbd_down)
0096:  BTFSS  22.0
0097:  GOTO   0A1
....................      {
....................       if(!ALL_ROWS())
0098:  CALL   022
0099:  MOVF   78,F
009A:  BTFSS  03.2
009B:  GOTO   0A0
....................         {
....................          kbd_down=false;
009C:  BCF    22.0
....................          kchar=last_key;
009D:  MOVF   23,W
009E:  MOVWF  25
....................          last_key='\0';
009F:  CLRF   23
....................         }
....................      }
00A0:  GOTO   0D4
....................    else
....................      {
....................       if(ALL_ROWS())
00A1:  CALL   022
00A2:  MOVF   78,F
00A3:  BTFSC  03.2
00A4:  GOTO   0CF
....................         {
....................          if(!input (row0))
00A5:  BSF    03.5
00A6:  BSF    06.0
00A7:  BCF    03.5
00A8:  BTFSC  06.0
00A9:  GOTO   0AC
....................             row=0;
00AA:  CLRF   26
00AB:  GOTO   0C3
....................          else if(!input (row1))
00AC:  BSF    03.5
00AD:  BSF    06.1
00AE:  BCF    03.5
00AF:  BTFSC  06.1
00B0:  GOTO   0B4
....................             row=1;
00B1:  MOVLW  01
00B2:  MOVWF  26
00B3:  GOTO   0C3
....................          else if(!input (row2))
00B4:  BSF    03.5
00B5:  BSF    06.2
00B6:  BCF    03.5
00B7:  BTFSC  06.2
00B8:  GOTO   0BC
....................             row=2;
00B9:  MOVLW  02
00BA:  MOVWF  26
00BB:  GOTO   0C3
....................          else if(!input (row3))
00BC:  BSF    03.5
00BD:  BSF    06.3
00BE:  BCF    03.5
00BF:  BTFSC  06.3
00C0:  GOTO   0C3
....................             row=3;
00C1:  MOVLW  03
00C2:  MOVWF  26
.................... 
....................          last_key =KEYS[row][col];
00C3:  RLF    26,W
00C4:  MOVWF  77
00C5:  RLF    77,F
00C6:  MOVLW  FC
00C7:  ANDWF  77,F
00C8:  MOVF   77,W
00C9:  ADDWF  24,W
00CA:  CALL   004
00CB:  MOVWF  78
00CC:  MOVWF  23
....................          kbd_down = true;
00CD:  BSF    22.0
....................         }
00CE:  GOTO   0D4
....................       else
....................         {
....................          ++col;
00CF:  INCF   24,F
....................          if(col==4)
00D0:  MOVF   24,W
00D1:  SUBLW  04
00D2:  BTFSC  03.2
....................             col=0;
00D3:  CLRF   24
....................         }
....................      }
....................    kbd_call_count=0;
00D4:  CLRF   21
....................   }
.................... return(kchar);
00D5:  MOVF   25,W
00D6:  MOVWF  78
00D7:  BCF    0A.3
00D8:  BCF    0A.4
00D9:  GOTO   0FC (RETURN)
.................... }
.................... 
.................... //=========================== 
.................... 
.................... 
.................... void main ( void ) {
*
00E2:  MOVF   03,W
00E3:  ANDLW  1F
00E4:  MOVWF  03
00E5:  BSF    03.5
00E6:  BSF    03.6
00E7:  MOVF   09,W
00E8:  ANDLW  C0
00E9:  MOVWF  09
00EA:  BCF    03.6
00EB:  BCF    1F.4
00EC:  BCF    1F.5
00ED:  MOVLW  00
00EE:  BSF    03.6
00EF:  MOVWF  08
00F0:  BCF    03.5
00F1:  CLRF   07
00F2:  CLRF   08
00F3:  CLRF   09
00F4:  BCF    03.7
....................    kbd_init ( );                     //inicialización del teclado.
*
00FA:  GOTO   018
.................... 
....................    while ( 1 ) {
....................       TECLA_PRESS = kbd_getc ( ) ;
00FB:  GOTO   047
00FC:  MOVF   78,W
00FD:  MOVWF  20
.................... 
....................       if ( TECLA_PRESS == '1' ) {
00FE:  MOVF   20,W
00FF:  SUBLW  31
0100:  BTFSS  03.2
0101:  GOTO   106
....................          output_HIGH ( LED );        //Cambio de estado en el pin RA1
0102:  BSF    03.5
0103:  BCF    05.1
0104:  BCF    03.5
0105:  BSF    05.1
....................       }
.................... 
....................       if ( TECLA_PRESS == '0' ) {
0106:  MOVF   20,W
0107:  SUBLW  30
0108:  BTFSS  03.2
0109:  GOTO   10E
....................          output_LOW ( LED );         //Cambio de estado en el pin RA1
010A:  BSF    03.5
010B:  BCF    05.1
010C:  BCF    03.5
010D:  BCF    05.1
....................       }
010E:  GOTO   0FB
....................    }
.................... }
010F:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
